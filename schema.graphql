# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  emailVerified: Boolean
  emailVerificationToken: String
  emailVerificationTokenExpiry: DateTime
  provider: String
  password: PasswordState
  subjectId: String
  createdAt: DateTime
  account: Account
  role: String
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  subjectId: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  emailVerified: BooleanFilter
  emailVerificationToken: StringFilter
  emailVerificationTokenExpiry: DateTimeNullableFilter
  provider: StringFilter
  password: PasswordFilter
  subjectId: StringFilter
  createdAt: DateTimeNullableFilter
  account: AccountWhereInput
  role: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  emailVerified: OrderDirection
  emailVerificationToken: OrderDirection
  emailVerificationTokenExpiry: OrderDirection
  provider: OrderDirection
  subjectId: OrderDirection
  createdAt: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  email: String
  emailVerified: Boolean
  emailVerificationToken: String
  emailVerificationTokenExpiry: DateTime
  provider: String
  password: String
  subjectId: String
  createdAt: DateTime
  account: AccountRelateToOneForUpdateInput
  role: String
}

input AccountRelateToOneForUpdateInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  emailVerified: Boolean
  emailVerificationToken: String
  emailVerificationTokenExpiry: DateTime
  provider: String
  password: String
  subjectId: String
  createdAt: DateTime
  account: AccountRelateToOneForCreateInput
  role: String
}

input AccountRelateToOneForCreateInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
}

type Account {
  id: ID!
  user: User
  firstName: String
  surname: String
  phone: String
  students(where: StudentWhereInput! = {}, orderBy: [StudentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Student!]
  studentsCount(where: StudentWhereInput! = {}): Int
  bills(where: BillWhereInput! = {}, orderBy: [BillOrderByInput!]! = [], take: Int, skip: Int! = 0): [Bill!]
  billsCount(where: BillWhereInput! = {}): Int
  streetAddress: String
  suburb: String
  postcode: Int
  createdAt: DateTime
}

input AccountWhereUniqueInput {
  id: ID
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IDFilter
  user: UserWhereInput
  firstName: StringFilter
  surname: StringFilter
  phone: StringFilter
  students: StudentManyRelationFilter
  bills: BillManyRelationFilter
  streetAddress: StringFilter
  suburb: StringFilter
  postcode: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input StudentManyRelationFilter {
  every: StudentWhereInput
  some: StudentWhereInput
  none: StudentWhereInput
}

input BillManyRelationFilter {
  every: BillWhereInput
  some: BillWhereInput
  none: BillWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AccountOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  surname: OrderDirection
  phone: OrderDirection
  streetAddress: OrderDirection
  suburb: OrderDirection
  postcode: OrderDirection
  createdAt: OrderDirection
}

input AccountUpdateInput {
  user: UserRelateToOneForUpdateInput
  firstName: String
  surname: String
  phone: String
  students: StudentRelateToManyForUpdateInput
  bills: BillRelateToManyForUpdateInput
  streetAddress: String
  suburb: String
  postcode: Int
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input StudentRelateToManyForUpdateInput {
  disconnect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

input BillRelateToManyForUpdateInput {
  disconnect: [BillWhereUniqueInput!]
  set: [BillWhereUniqueInput!]
  create: [BillCreateInput!]
  connect: [BillWhereUniqueInput!]
}

input AccountUpdateArgs {
  where: AccountWhereUniqueInput!
  data: AccountUpdateInput!
}

input AccountCreateInput {
  user: UserRelateToOneForCreateInput
  firstName: String
  surname: String
  phone: String
  students: StudentRelateToManyForCreateInput
  bills: BillRelateToManyForCreateInput
  streetAddress: String
  suburb: String
  postcode: Int
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input StudentRelateToManyForCreateInput {
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

input BillRelateToManyForCreateInput {
  create: [BillCreateInput!]
  connect: [BillWhereUniqueInput!]
}

type Student {
  id: ID!
  firstName: String
  surname: String
  dateOfBirth: CalendarDay
  account: Account
  enrollments(where: EnrolmentWhereInput! = {}, orderBy: [EnrolmentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Enrolment!]
  enrollmentsCount(where: EnrolmentWhereInput! = {}): Int
  createdAt: DateTime
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input StudentWhereUniqueInput {
  id: ID
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  id: IDFilter
  firstName: StringFilter
  surname: StringFilter
  dateOfBirth: CalendarDayNullableFilter
  account: AccountWhereInput
  enrollments: EnrolmentManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input EnrolmentManyRelationFilter {
  every: EnrolmentWhereInput
  some: EnrolmentWhereInput
  none: EnrolmentWhereInput
}

input StudentOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  surname: OrderDirection
  dateOfBirth: OrderDirection
  createdAt: OrderDirection
}

input StudentUpdateInput {
  firstName: String
  surname: String
  dateOfBirth: CalendarDay
  account: AccountRelateToOneForUpdateInput
  enrollments: EnrolmentRelateToManyForUpdateInput
  createdAt: DateTime
}

input EnrolmentRelateToManyForUpdateInput {
  disconnect: [EnrolmentWhereUniqueInput!]
  set: [EnrolmentWhereUniqueInput!]
  create: [EnrolmentCreateInput!]
  connect: [EnrolmentWhereUniqueInput!]
}

input StudentUpdateArgs {
  where: StudentWhereUniqueInput!
  data: StudentUpdateInput!
}

input StudentCreateInput {
  firstName: String
  surname: String
  dateOfBirth: CalendarDay
  account: AccountRelateToOneForCreateInput
  enrollments: EnrolmentRelateToManyForCreateInput
  createdAt: DateTime
}

input EnrolmentRelateToManyForCreateInput {
  create: [EnrolmentCreateInput!]
  connect: [EnrolmentWhereUniqueInput!]
}

type Class {
  id: ID!
  name: String
  time: String
  day: String
  minimumAge: Int
  maximumAge: Int
  cost: Decimal
  quantity: Int
  startDate: CalendarDay
  endDate: CalendarDay
  type: String
  location: String
  status: String
  createdAt: DateTime
}

scalar Decimal

input ClassWhereUniqueInput {
  id: ID
}

input ClassWhereInput {
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
  id: IDFilter
  name: StringFilter
  time: StringFilter
  day: StringNullableFilter
  minimumAge: IntNullableFilter
  maximumAge: IntNullableFilter
  cost: DecimalNullableFilter
  quantity: IntNullableFilter
  startDate: CalendarDayNullableFilter
  endDate: CalendarDayNullableFilter
  type: StringNullableFilter
  location: StringFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input ClassOrderByInput {
  id: OrderDirection
  name: OrderDirection
  time: OrderDirection
  day: OrderDirection
  minimumAge: OrderDirection
  maximumAge: OrderDirection
  cost: OrderDirection
  quantity: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  type: OrderDirection
  location: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input ClassUpdateInput {
  name: String
  time: String
  day: String
  minimumAge: Int
  maximumAge: Int
  cost: Decimal
  quantity: Int
  startDate: CalendarDay
  endDate: CalendarDay
  type: String
  location: String
  status: String
  createdAt: DateTime
}

input ClassUpdateArgs {
  where: ClassWhereUniqueInput!
  data: ClassUpdateInput!
}

input ClassCreateInput {
  name: String
  time: String
  day: String
  minimumAge: Int
  maximumAge: Int
  cost: Decimal
  quantity: Int
  startDate: CalendarDay
  endDate: CalendarDay
  type: String
  location: String
  status: String
  createdAt: DateTime
}

type Enrolment {
  id: ID!
  class: Class
  student: Student
  status: String
  createdAt: DateTime
}

input EnrolmentWhereUniqueInput {
  id: ID
}

input EnrolmentWhereInput {
  AND: [EnrolmentWhereInput!]
  OR: [EnrolmentWhereInput!]
  NOT: [EnrolmentWhereInput!]
  id: IDFilter
  class: ClassWhereInput
  student: StudentWhereInput
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
}

input EnrolmentOrderByInput {
  id: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input EnrolmentUpdateInput {
  class: ClassRelateToOneForUpdateInput
  student: StudentRelateToOneForUpdateInput
  status: String
  createdAt: DateTime
}

input ClassRelateToOneForUpdateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
  disconnect: Boolean
}

input StudentRelateToOneForUpdateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
  disconnect: Boolean
}

input EnrolmentUpdateArgs {
  where: EnrolmentWhereUniqueInput!
  data: EnrolmentUpdateInput!
}

input EnrolmentCreateInput {
  class: ClassRelateToOneForCreateInput
  student: StudentRelateToOneForCreateInput
  status: String
  createdAt: DateTime
}

input ClassRelateToOneForCreateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

input StudentRelateToOneForCreateInput {
  create: StudentCreateInput
  connect: StudentWhereUniqueInput
}

type Bill {
  id: ID!
  name: String
  account: Account
  date: CalendarDay
  dueDate: CalendarDay
  total: Decimal
  status: String
  items(where: BillItemWhereInput! = {}, orderBy: [BillItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [BillItem!]
  itemsCount(where: BillItemWhereInput! = {}): Int
  createdAt: DateTime
}

input BillWhereUniqueInput {
  id: ID
}

input BillWhereInput {
  AND: [BillWhereInput!]
  OR: [BillWhereInput!]
  NOT: [BillWhereInput!]
  id: IDFilter
  name: StringFilter
  account: AccountWhereInput
  date: CalendarDayNullableFilter
  dueDate: CalendarDayNullableFilter
  status: StringNullableFilter
  items: BillItemManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input BillItemManyRelationFilter {
  every: BillItemWhereInput
  some: BillItemWhereInput
  none: BillItemWhereInput
}

input BillOrderByInput {
  id: OrderDirection
  name: OrderDirection
  date: OrderDirection
  dueDate: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input BillUpdateInput {
  name: String
  account: AccountRelateToOneForUpdateInput
  date: CalendarDay
  dueDate: CalendarDay
  status: String
  items: BillItemRelateToManyForUpdateInput
  createdAt: DateTime
}

input BillItemRelateToManyForUpdateInput {
  disconnect: [BillItemWhereUniqueInput!]
  set: [BillItemWhereUniqueInput!]
  create: [BillItemCreateInput!]
  connect: [BillItemWhereUniqueInput!]
}

input BillUpdateArgs {
  where: BillWhereUniqueInput!
  data: BillUpdateInput!
}

input BillCreateInput {
  name: String
  account: AccountRelateToOneForCreateInput
  date: CalendarDay
  dueDate: CalendarDay
  status: String
  items: BillItemRelateToManyForCreateInput
  createdAt: DateTime
}

input BillItemRelateToManyForCreateInput {
  create: [BillItemCreateInput!]
  connect: [BillItemWhereUniqueInput!]
}

type BillItem {
  id: ID!
  name: String
  bill: Bill
  quantity: Int
  amount: Decimal
  total: Decimal
  createdAt: DateTime
}

input BillItemWhereUniqueInput {
  id: ID
}

input BillItemWhereInput {
  AND: [BillItemWhereInput!]
  OR: [BillItemWhereInput!]
  NOT: [BillItemWhereInput!]
  id: IDFilter
  name: StringFilter
  bill: BillWhereInput
  quantity: IntNullableFilter
  amount: DecimalNullableFilter
  createdAt: DateTimeNullableFilter
}

input BillItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  quantity: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
}

input BillItemUpdateInput {
  name: String
  bill: BillRelateToOneForUpdateInput
  quantity: Int
  amount: Decimal
  createdAt: DateTime
}

input BillRelateToOneForUpdateInput {
  create: BillCreateInput
  connect: BillWhereUniqueInput
  disconnect: Boolean
}

input BillItemUpdateArgs {
  where: BillItemWhereUniqueInput!
  data: BillItemUpdateInput!
}

input BillItemCreateInput {
  name: String
  bill: BillRelateToOneForCreateInput
  quantity: Int
  amount: Decimal
  createdAt: DateTime
}

input BillRelateToOneForCreateInput {
  create: BillCreateInput
  connect: BillWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAccount(data: AccountCreateInput!): Account
  createAccounts(data: [AccountCreateInput!]!): [Account]
  updateAccount(where: AccountWhereUniqueInput!, data: AccountUpdateInput!): Account
  updateAccounts(data: [AccountUpdateArgs!]!): [Account]
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAccounts(where: [AccountWhereUniqueInput!]!): [Account]
  createStudent(data: StudentCreateInput!): Student
  createStudents(data: [StudentCreateInput!]!): [Student]
  updateStudent(where: StudentWhereUniqueInput!, data: StudentUpdateInput!): Student
  updateStudents(data: [StudentUpdateArgs!]!): [Student]
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteStudents(where: [StudentWhereUniqueInput!]!): [Student]
  createClass(data: ClassCreateInput!): Class
  createClasses(data: [ClassCreateInput!]!): [Class]
  updateClass(where: ClassWhereUniqueInput!, data: ClassUpdateInput!): Class
  updateClasses(data: [ClassUpdateArgs!]!): [Class]
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteClasses(where: [ClassWhereUniqueInput!]!): [Class]
  createEnrolment(data: EnrolmentCreateInput!): Enrolment
  createEnrolments(data: [EnrolmentCreateInput!]!): [Enrolment]
  updateEnrolment(where: EnrolmentWhereUniqueInput!, data: EnrolmentUpdateInput!): Enrolment
  updateEnrolments(data: [EnrolmentUpdateArgs!]!): [Enrolment]
  deleteEnrolment(where: EnrolmentWhereUniqueInput!): Enrolment
  deleteEnrolments(where: [EnrolmentWhereUniqueInput!]!): [Enrolment]
  createBill(data: BillCreateInput!): Bill
  createBills(data: [BillCreateInput!]!): [Bill]
  updateBill(where: BillWhereUniqueInput!, data: BillUpdateInput!): Bill
  updateBills(data: [BillUpdateArgs!]!): [Bill]
  deleteBill(where: BillWhereUniqueInput!): Bill
  deleteBills(where: [BillWhereUniqueInput!]!): [Bill]
  createBillItem(data: BillItemCreateInput!): BillItem
  createBillItems(data: [BillItemCreateInput!]!): [BillItem]
  updateBillItem(where: BillItemWhereUniqueInput!, data: BillItemUpdateInput!): BillItem
  updateBillItems(data: [BillItemUpdateArgs!]!): [BillItem]
  deleteBillItem(where: BillItemWhereUniqueInput!): BillItem
  deleteBillItems(where: [BillItemWhereUniqueInput!]!): [BillItem]
  endSession: Boolean!
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0): [Account!]
  account(where: AccountWhereUniqueInput!): Account
  accountsCount(where: AccountWhereInput! = {}): Int
  students(where: StudentWhereInput! = {}, orderBy: [StudentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Student!]
  student(where: StudentWhereUniqueInput!): Student
  studentsCount(where: StudentWhereInput! = {}): Int
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [Class!]
  class(where: ClassWhereUniqueInput!): Class
  classesCount(where: ClassWhereInput! = {}): Int
  enrolments(where: EnrolmentWhereInput! = {}, orderBy: [EnrolmentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Enrolment!]
  enrolment(where: EnrolmentWhereUniqueInput!): Enrolment
  enrolmentsCount(where: EnrolmentWhereInput! = {}): Int
  bills(where: BillWhereInput! = {}, orderBy: [BillOrderByInput!]! = [], take: Int, skip: Int! = 0): [Bill!]
  bill(where: BillWhereUniqueInput!): Bill
  billsCount(where: BillWhereInput! = {}): Int
  billItems(where: BillItemWhereInput! = {}, orderBy: [BillItemOrderByInput!]! = [], take: Int, skip: Int! = 0): [BillItem!]
  billItem(where: BillItemWhereUniqueInput!): BillItem
  billItemsCount(where: BillItemWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
